# -*- coding: utf-8 -*-
"""Semana-i-neoris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-u6YrKGDmvNTDjDH0nls8Cq0BNItqoZY

# Semana i
"""

!pip install prophet

!pip install plotly

# Python
import pandas as pd
from prophet import Prophet
import datetime
import matplotlib.pyplot as plt 
from matplotlib.pyplot import figure
from IPython.display import HTML
import plotly.express as px
import plotly.graph_objects as go
import glob
from prophet.diagnostics import performance_metrics
from prophet.diagnostics import cross_validation

li = []

path = r'/content/' # use your path
all_files = glob.glob(path + "/*.parquet.gzip")

li = []

for filename in all_files:
    df = pd.read_parquet(filename)
    li.append(df)

df = pd.concat(li, axis=0, ignore_index=True)

"""## Limpieza de Datos

"""

df.drop(['SALES_DIST','SOLD_TO','SHIP_TO','MATERIAL'],inplace=True,axis=1)
df.head()

start_date = '2019-09-01'
end_date = '2019-09-30'
mask = (df['BILL_DATE'] > start_date) & (df['BILL_DATE'] <= end_date)
df_tmp = df.loc[mask]
september_mean = df_tmp.groupby('BILL_DATE',dropna=True)["PIEZAS"].sum().mean()
print(september_mean)

start_date = '2020-09-01'
end_date = '2020-09-30'
mask = (df['BILL_DATE'] > start_date) & (df['BILL_DATE'] <= end_date)
df_tmp = df.loc[mask]
september_mean2 = df_tmp.groupby('BILL_DATE',dropna=True)["PIEZAS"].sum().mean()
print(september_mean2)

#df.between_time('2019-09-01', '2019-09-30')
aux= pd.date_range("2019-10-01", periods = 31, freq = "D")
aux2= pd.date_range("2020-10-01", periods = 31, freq = "D")
ser = pd.DataFrame(data=aux,columns=['BILL_DATE'])
ser['PIEZAS'] = september_mean
ser2 = pd.DataFrame(data=aux2,columns=['BILL_DATE'])
ser2['PIEZAS'] = september_mean2
print(ser)

df_day = df.groupby('BILL_DATE',dropna=True, as_index=False)["PIEZAS"].sum()
df_day

lis = [df_day,ser,ser2]
df_tmp2 = pd.concat(lis)
df_tmp2.sort_values(by='BILL_DATE',inplace=True)
df_tmp2
df_train = df_tmp2[:int(len(df_tmp2)*0.6)]
df_validation = df_tmp2[int(len(df_tmp2)*0.6):int(len(df_tmp2)*0.8)]
df_test = df_tmp2[int(len(df_tmp2)*0.8):]

print(df_train.shape,df_validation.shape,df_test.shape)

print(df.shape)

fig = px.scatter(df_train,y='PIEZAS',x='BILL_DATE')
HTML(fig.to_html())

fig = px.line(df_train,y='PIEZAS',x='BILL_DATE')
HTML(fig.to_html())

df_tmp2.columns = ['ds','y']
df_train.columns = ['ds','y']
df_validation.columns = ['ds','y']
df_test.columns = ['ds','y']
df_train.head()

m = Prophet()
m.fit(df_tmp2)

future = m.make_future_dataframe(periods=7)
future.tail(7)

forecast = m.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(7)

from prophet.plot import plot_plotly, plot_components_plotly
plot_plotly(m,forecast)

plot_components_plotly(m,forecast)

df_cv = cross_validation(m, initial='393 days', period='30 days', horizon = '7 days')
df_cv.head()

df_p = performance_metrics(df_cv)
df_p.head(10)

from prophet.plot import plot_cross_validation_metric
fig = plot_cross_validation_metric(df_cv, metric='mape')